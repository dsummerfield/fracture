UnaryOperators = ['-']
BinaryOperators = ['+', '-', '*', '/']
ComparisonOperators = {
    '==' : " && ",
    '!=' : " || ",
    '<' : " || ",
    '>' : " || "
}
UsingNamespaces = ['System', 'System.Text']
VectorTypes = {
    'Vec2': ['X', 'Y'],
    'Vec3': ['X', 'Y', 'Z'],
    'Vec4': ['X', 'Y', 'Z', 'W']
}
ValueConstructors = {
    'Zero': 0,
    'One': 1
}
OutputNamespace = "Squared.Util"
EltType = "Single"

f = open(".\\_Vector.cs", "w")

f.write("// Generated by gen_vector.py\n\n")

for ns in UsingNamespaces:
    f.write("using %s;\n" % (ns))
    
f.write("\n")

f.write("namespace %s {\n    using Elt = %s;\n\n" % (OutputNamespace, EltType))

for ty in sorted(VectorTypes.keys()):
    f.write("    #region Auto-generated code for struct %s\n\n" % (ty))
    
    fields = VectorTypes[ty]
    f.write("    public partial struct %s {\n" % (ty))
    f.write("        public Elt %s;\n\n" % (", ".join(fields)))
    
    f.write("        public %s (%s) {\n" % (ty, ", ".join("Elt " + x.lower() for x in fields)))
    for x in fields:
        f.write("            %s = %s;\n" % (x, x.lower()))
    f.write("        }\n\n")
    
    for op in UnaryOperators:
        f.write("        public static %s operator %s (%s value) {\n" % (ty, op, ty))
        f.write("            return new %s(\n" % (ty))
        f.write("                %s\n" % (", ".join(op + 'value.' + x for x in fields)))
        f.write("            );\n")
        f.write("        }\n\n")
    
    for op in BinaryOperators:
        f.write("        public static %s operator %s (%s lhs, %s rhs) {\n" % (ty, op, ty, ty))
        f.write("            return new %s(\n" % (ty))
        f.write("                %s\n" % (", ".join('lhs.' + x + ' ' + op + ' rhs.' + x for x in fields)))
        f.write("            );\n")
        f.write("        }\n\n")
        
        f.write("        public static %s operator %s (%s lhs, Elt rhs) {\n" % (ty, op, ty))
        f.write("            return new %s(\n" % (ty))
        f.write("                %s\n" % (", ".join('lhs.' + x + ' ' + op + ' rhs' for x in fields)))
        f.write("            );\n")
        f.write("        }\n\n")
    
    for op in ComparisonOperators.keys():
        f.write("        public static bool operator %s (%s lhs, %s rhs) {\n" % (op, ty, ty))
        f.write("            return %s;\n" % (
            ComparisonOperators[op].join('(lhs.' + x + ' ' + op + ' rhs.' + x + ')' for x in fields)
        ))
        f.write("        }\n\n")
    
    f.write("        public Elt Magnitude {\n")
    f.write("            get {\n")
    f.write("                return (Elt)Math.Sqrt(%s);\n" % (
        " + ".join('(' + x + ' * ' + x + ')' for x in fields)
    ))
    f.write("            }\n")
    f.write("        }\n\n")
    
    f.write("        public %s ToUnit() {\n" % (ty))
    f.write("            return this / this.Magnitude;\n")
    f.write("        }\n\n")
    
    f.write("        public %s[] ToArray() {\n" % (EltType))
    f.write("            return new %s[] { %s };\n" % (
        EltType, ", ".join(fields)
    ))
    f.write("        }\n\n")
    
    f.write("        public override string ToString() {\n")
    f.write("            return String.Format(\"%s\", %s);\n" % (
        "(" + ", ".join("{" + str(n) + "}" for n in range(len(fields))) + ")",
        ", ".join(fields)
    ))
    f.write("        }\n\n")
    
    f.write("    }\n\n")
    f.write("    #endregion\n\n")
    
f.write("}\n")
